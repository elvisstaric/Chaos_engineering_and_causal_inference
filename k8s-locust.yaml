apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust
  labels:
    app: locust
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust
  template:
    metadata:
      labels:
        app: locust
    spec:
      containers:
        - name: locust
          image: locustio/locust:latest
          ports:
            - containerPort: 8089
        env:
        - name: LOCUST_HOST
          value: "http://toxiproxy:8600"
        command:
        - "locust"
        - "-f"
        - "/mnt/locust/locustfile.py"
        - "--host=http://toxiproxy:8600"
          volumeMounts:
            - name: locust-config
              mountPath: /mnt/locust
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: locust-config
          configMap:
            name: locust-config
---
apiVersion: v1
kind: Service
metadata:
  name: locust
  labels:
    app: locust
spec:
  selector:
    app: locust
  ports:
    - port: 8089
      targetPort: 8089
      protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-config
data:
  locustfile.py: |
    from locust import HttpUser, task, between
    import random
    import string

    def random_string(length=6):
        return ''.join(random.choices(string.ascii_lowercase, k=length))

    class User(HttpUser):
        weight=9
        def on_start(self):
            self.username = None
            self.token = None

        wait_time = between(1, 3)
        host = None 
        @task(1)
        def register_or_login(self):
            base_user = "http://toxiproxy:8600"

            if random.random() < 0.5:
                username = f"user_{random_string()}"
                password = "pass123"
                self.client.post(f"{base_user}/register", json={"username": username, "password": password})
            else:
                username = random.choice(["user1", "user2"])
                password = "pass1" if username == "user1" else "pass2"

            self.username = username 

            res = self.client.post(f"{base_user}/login", json={"username": username, "password": password})
            if res.status_code == 200:
                self.token = "valid-token"

        @task(3)
        def browse_products(self):
            base_inventory = "http://toxiproxy:8601"
            self.client.get(f"{base_inventory}/products")

        @task(2)
        def add_product_to_cart(self):
            base_inventory = "http://toxiproxy:8601"
            base_cart = "http://toxiproxy:8602"
            response = self.client.get(f"{base_inventory}/products")
            if response.status_code == 200:
                products = response.json()
                if products:
                    product = random.choice(products)
                    quantity = random.randint(1, 3)
                    self.client.post(f"{base_cart}/cart", json={
                        "product_id": product["product_id"],
                        "quantity": quantity
                    })

        @task(1)
        def view_cart(self):
            base_cart = "http://toxiproxy:8602"
            self.client.get(f"{base_cart}/cart")

        @task(1)
        def create_order(self):
            base_order = "http://toxiproxy:8603"
            self.client.post(f"{base_order}/orders", json={
                "user_id": self.username or "user1",
                "items": [{"product_id": "1", "quantity": 1}]
            })
